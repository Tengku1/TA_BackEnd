def ECR_REPO = 'asia.gcr.io/xplorin-prod/api'
def NS = 'dev'
def GIT_REPO = 'https://github.com/devdigitalbuana/dbxplorin-api.git'
def curCommit = ''
def lastCommit = ''

def notifyBuild(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESSFUL'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"
  def details = """<p>STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
    <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>"""

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESSFUL') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }

  // Send notifications
  slackSend (color: colorCode, message: summary)
}

try {
    node("jenkins-agent") {
       stage('Clone'){
           try {
               checkout([$class: 'GitSCM', branches: [[name: '*/main']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CloneOption', depth: 2, noTags: true, reference: '', shallow: true]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'devdigitalbuana-git-token', url: GIT_REPO]]])

               curCommit = sh(returnStdout: true, script: "git log -n 1 --pretty=format:'%h'").trim()
               lastCommit = sh(returnStdout: true, script: "git log -n 2 --pretty=format:'%h' | tail -n +2 ").trim()

               echo "current commit:"+ curCommit
               echo "last commit:"+ lastCommit
           } catch (Exception e) {
               echo 'Exception occurred: ' + e.toString()
               error('Failed to build')
           }
       }
       stage('Build Docker'){
           try {
               sh label: '', script: '''
                   docker build -f Dockerfile -t ''' + ECR_REPO + ''' .
               '''
           } catch (Exception e) {
               echo 'Exception occurred: ' + e.toString()
               error('Failed to build')
           }
       }
       stage('Push to ECR'){
           try {
               docker.withRegistry('https://'+ECR_REPO, 'gcr:xplorin-prod') {
                   docker.image(ECR_REPO).push('latest')
               }
               docker.withRegistry('https://'+ECR_REPO, 'gcr:xplorin-prod') {
                   docker.image(ECR_REPO).push(curCommit)
    	         }
           } catch (Exception e) {
               echo 'Exception occurred: ' + e.toString()
               error('Failed to build')
           }
       }
       stage('Rolling update deployment'){
           try {
               sh '/usr/local/bin/kubectl set image deployment/app-xplorin-api xplorin-api='+ ECR_REPO + ':'+ curCommit +' -n '+ NS + ''
           } catch (Exception e) {
               echo 'Exception occurred: ' + e.toString()
               error('Failed to build')
           }
       }
       stage('Cleaning up docker images'){
           try {
               sh label: '', script: '''
               docker rmi -f $(docker images | grep 'xplorin-prod/api' | awk '{print $1,$3}' | grep -v IMAGE | awk '{print $2}' | uniq)
               docker image prune -a --filter "until=$(date +'%Y-%m-%dT%H:%M:%S' --date='-30 days')"
               '''
          } catch (Exception e) {
              echo 'Exception occurred: ' + e.toString()
              error('Failed to build')
          }
       }
       stage('Cleaning up workspace'){
           cleanWs()
       }
    }
    notifyBuild('SUCCESSFUL')

}
catch (Exception e) {
    echo 'Exception occurred: ' + e.toString()
    notifyBuild('ERROR ' + e.toString())
}
