def ECR_REPO = 'asia.gcr.io/xplorin-prod/api'
def NS = 'app'
def GIT_REPO = 'https://github.com/devdigitalbuana/dbxplorin-api.git'
def curCommit = ''
def lastCommit = ''

def notifyBuild(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESSFUL'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"
  def details = """<p>STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
    <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>"""

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESSFUL') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }

  // Send notifications
  slackSend (
    color: colorCode,
    message: summary,
    channel: "#develop-xplorin-app"
  )
}

try {
    node("jenkins-agent") {
       stage('Clone'){
           try {

               checkout([
                $class: 'GitSCM',
                branches: [[name: '*/main']],
                doGenerateSubmoduleConfigurations: false,
                extensions: [[
                $class: 'CloneOption',
                depth: 2,
                noTags: false,
                reference: '',
                shallow: true]],
                submoduleCfg: [],
                userRemoteConfigs: [[credentialsId: 'devdigitalbuana-git-token', url: GIT_REPO]]
               ])

               curCommit = sh(returnStdout: true, script: "git log -n 1 --pretty=format:'%h'").trim()
               lastCommit = sh(returnStdout: true, script: "git log -n 2 --pretty=format:'%h' | tail -n +2 ").trim()

               echo "current commit:"+ curCommit
               echo "last commit:"+ lastCommit

           } catch (Exception e) {
               echo 'Exception occurred: ' + e.toString()
               error('Failed to build')
           }
       }
       stage('Preparing workspace..'){
             script {
               sh label: '', script: '''
                   git checkout tags/${TAGS}
               '''
             }
       }
       stage('Rolling update deployment'){
           try {
                withKubeConfig([credentialsId: 'kubeconfig-prod']) {
                   sh label: '', script: '''
                   	/usr/local/bin/kubectl set image deployment/api-xplorin-api xplorin-api='''+ ECR_REPO + ''':$TAGS -n ''' + NS + '''
               	   '''
                }
           } catch (Exception e) {
               echo 'Exception occurred: ' + e.toString()
               error('Failed to build')
           }
       }
       stage('Cleaning up workspace'){
           cleanWs()
       }
    }
    notifyBuild('SUCCESSFUL')

}
catch (Exception e) {
    echo 'Exception occurred: ' + e.toString()
    notifyBuild('ERROR ' + e.toString())
}
